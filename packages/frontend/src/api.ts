import axios from 'axios';

const apiHost = 'http://localhost:3001';

function getApiUrl(path: string): string {
    return `${apiHost}${path}`;
}

const http = axios.create();
const authTokenMock = '123456';

// Watch the response status and act on certain statuses like 403.
http.interceptors.response.use(res => {
    if (res.status === 403) {
        // Do something if we are not authenticated. Display login popup, or redirect
        // to an SSO resource, or to a 3rd party authentication provider.
    }
    return res;
});

// Attach the authentication token to each request in case this is a private API.
http.interceptors.request.use(req => {
    req.headers.Authorization = `Bearer ${authTokenMock}`;
    return req;
})

// In real life this would be autogenerated from OpenAPI specs of the backend API.
export const api = {
    getList: () => http.get(getApiUrl('/')).then(r => r.data),
    getBlock: (blockHash: string) => http.get(getApiUrl(`/${blockHash}`)).then(r => r.data)
}
